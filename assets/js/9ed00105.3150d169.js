"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[873],{8730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"configuration","title":"Configuration","description":"When you run Palworld, it\'ll generate a config.json in a config folder where Pal Schema resides. This config file can be used to customize how Pal Schema functions and more settings will be added as development progresses further.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/PalSchema/docs/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"documentationSidebar","previous":{"title":"Installation","permalink":"/PalSchema/docs/installation"},"next":{"title":"Resources","permalink":"/PalSchema/docs/resources"}}');var a=t(4848),i=t(8453);const s={sidebar_position:2},r="Configuration",l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,a.jsxs)(n.p,{children:["When you run Palworld, it'll generate a ",(0,a.jsx)(n.code,{children:"config.json"})," in a config folder where Pal Schema resides. This config file can be used to customize how Pal Schema functions and more settings will be added as development progresses further."]}),"\n",(0,a.jsx)(n.p,{children:"I will present an example of a default config.json after it has been generated and explain what each value does."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "languageOverride": "",\n    "enableExperimentalBlueprintSupport": false\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"languageOverride"})," can be used to load custom translation mods for languages that the game doesn't normally support, this could in theory be anything, but it's preferred to follow the ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes",children:"ISO-639"})," two-letter codes. If it's a made up language like pirate speak for example then you can just do ",(0,a.jsx)(n.code,{children:"pirate"}),". Setting ",(0,a.jsx)(n.code,{children:"languageOverride"})," to ",(0,a.jsx)(n.code,{children:'""'})," will default to using whatever language Steam is set to."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"enableExperimentalBlueprintSupport"})," is used to enable or disable experimental loading of blueprint editing mods. Defaults to ",(0,a.jsx)(n.code,{children:"false"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);