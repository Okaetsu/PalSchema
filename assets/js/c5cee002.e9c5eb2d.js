"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[754],{8357:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"types/structproperty","title":"Struct","description":"Struct Properties are a bit more complex as it will be combining a lot of the previous types. Struct Property is not something commonly seen in Datatables. You\'re more likely to see them when working with blueprints. Pal/Content/Pal/DataTable/ItemShop/DT_ItemShopCreateData.uasset will be used as an example.","source":"@site/docs/types/structproperty.md","sourceDirName":"types","slug":"/types/structproperty","permalink":"/PalSchema/docs/types/structproperty","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"documentationSidebar","previous":{"title":"Array","permalink":"/PalSchema/docs/types/arrayproperty"},"next":{"title":"Guides","permalink":"/PalSchema/docs/category/guides"}}');var s=r(4848),o=r(8453);const a={sidebar_position:8},i="Struct",c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"struct",children:"Struct"})}),"\n",(0,s.jsxs)(t.p,{children:["Struct Properties are a bit more complex as it will be combining a lot of the previous types. Struct Property is not something commonly seen in Datatables. You're more likely to see them when working with blueprints. ",(0,s.jsx)(t.code,{children:"Pal/Content/Pal/DataTable/ItemShop/DT_ItemShopCreateData.uasset"})," will be used as an example."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"productDataArray"})," in ",(0,s.jsx)(t.code,{children:"DT_ItemShopCreateData"})," is an ",(0,s.jsx)(t.a,{href:"/PalSchema/docs/types/arrayproperty",children:"Array Property"}),", but the items inside the array are Struct Properties. Below is how you would define a Struct Property in Pal Schema:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "StaticItemId": "Blueprint_Head003_1",\n    "ProductType": "EPalItemShopProductType::Normal",\n    "OverridePrice": 0,\n    "ProductNum": 1,\n    "Stock": 0\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"StaticItemId"})," is a ",(0,s.jsx)(t.a,{href:"/PalSchema/docs/types/fname",children:"FName Property"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ProductType"})," is an ",(0,s.jsx)(t.a,{href:"/PalSchema/docs/types/enumproperty",children:"Enum Property"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"OverridePrice"}),", ",(0,s.jsx)(t.code,{children:"ProductNum"})," and ",(0,s.jsx)(t.code,{children:"Stock"})," are ",(0,s.jsx)(t.a,{href:"/PalSchema/docs/types/numericproperty",children:"Numeric Properties"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"As you can see we defined the struct as a json object."})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);